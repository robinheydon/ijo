///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

#include <flecs.h>
#include <raylib.h>

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

#include "components.h"

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern ecs_world_t *world;

void init_components (void);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern ecs_entity_t PhaseProcessInputs;
extern ecs_entity_t PhaseUpdate;
extern ecs_entity_t PhaseBeginDrawing;
extern ecs_entity_t PhaseBegin3D;
extern ecs_entity_t PhaseDraw3D;
extern ecs_entity_t PhaseEnd3D;
extern ecs_entity_t PhaseBegin2D;
extern ecs_entity_t PhaseDraw2D;
extern ecs_entity_t PhaseDrawDebug;
extern ecs_entity_t PhaseEnd2D;
extern ecs_entity_t PhaseEndDrawing;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

void move_system (ecs_iter_t *it);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern ECS_COMPONENT_DECLARE (DebugFPS);

void init_fps_counter (void);
void toggle_fps_counter (void);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

void init_trees (void);
ecs_entity_t mk_tree (float x, float y);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern void *atkinson_regular;
extern uint64_t atkinson_regular_len;

extern Font main_font;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

float frand (void);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern double sim_time;
extern double sim_delta_time;
extern double sim_speed;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

typedef enum Modifier {
    None,
    Shift,
    Control,
    ShiftControl,
} Modifier;

void set_key_binding (KeyboardKey key, Modifier mod, void (*callback) (void));

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
